import pandas as pd
import folium
from folium.plugins import MarkerCluster
import streamlit as st
import plotly.graph_objects as go
import requests
import geojson
from shapely.geometry import shape

st.sidebar.header("üìç Digite sua localiza√ß√£o")

latitude_usuario = st.sidebar.number_input("Latitude", value=00.000000, format="%.6f", step=0.000001)
longitude_usuario = st.sidebar.number_input("Longitude", value=00.000000, format="%.6f", step=0.000001)
coordenadas_usuario = (latitude_usuario, longitude_usuario)

if latitude_usuario != 0.0 and longitude_usuario != 0.0:

    def calcular_distancia_osrm(origem, destino):
        try:
            url = f"http://router.project-osrm.org/route/v1/driving/{origem[1]},{origem[0]};{destino[1]},{destino[0]}?overview=false"
            response = requests.get(url)
            data = response.json()
            distancia_km = data['routes'][0]['legs'][0]['distance'] / 1000  # metros para km
            return round(distancia_km, 2)
        except:
            return None
    
    
    dados = pd.DataFrame({
        "Nome": ["Rancho",
                "Ch√°cara charmosa",
                "Ch√°cara agrad√°vel",
                "Casa inteira"],
        "Valor": [3250, 5525, 3888, 4840],
        "Dist√¢ncia (km)": [43, 15, 24, 34],
        "Avalia√ß√£o": [5, 4.7, 4.89, 4.88],
        "N√∫mero de Avalia√ß√µes": [2, 40, 18, 56],
        "Comodidades": [
        "Piscina, Wi-Fi, Churrasqueira, TV, Mesa de bilhar, Cozinha completa, Microondas, Freezer, Fog√£o, Forno, Cafeteira, Torradeira, Liquidificador, Assadeira, Utens√≠lios de cozinha, Roupa de cama, Estacionamento, Permitido animais, Acesso ao lago, Quintal, Cadeira espregui√ßadeira",
        "Piscina, Jacuzzi, Wi-Fi, Wifi port√°til, Espa√ßo de trabalho, TV, Churrasqueira, Cozinha completa, Microondas, Freezer, Fog√£o, Cafeteira, Refrigerador, Utens√≠lios de cozinha, Ta√ßas de vinho, M√≥veis externos, √Årea de jantar externa, Quintal, P√°tio ou varanda, Cadeira espregui√ßadeira, Estacionamento, Entrada privada, Permitido animais, Permitido fumar, Self check-in, Casa t√©rrea, Rede de prote√ß√£o, Ar-condicionado, Cabides, Cofre de chaves",
        "Piscina, Wi-Fi, TV, Churrasqueira, Cozinha, Refrigerador, Lou√ßas e talheres, Cafeteira, Quintal, Fogueira, √Årea de jantar externa, Estacionamento, Permitido animais, Permitido fumar",
        "Piscina privativa, Wi-Fi, TV a cabo, Mesa de ping pong, Cozinha completa, Refrigerador, Microondas, Lava-lou√ßas, Forno, Fog√£o, Lou√ßas e talheres, Cafeteira Nespresso, Utens√≠lios para churrasco, Mesa de jantar, √Årea de jantar externa, Quintal privativo, Varanda, Parque infantil, Bicicletas infantis, Ventilador de teto, Espa√ßo de trabalho exclusivo, M√°quina de lavar, Ferro de passar, Estacionamento, Estacionamento na rua, Permitido fumar, Entrada privada, Self check-in, Rede",
        ],
        "Latitude": [-23.027427, -22.878504, -22.798743, -23.045810],
        "Longitude": [-47.220915, -47.209515, -47.000084, -46.985050],
    })

    # C√°lculo da dist√¢ncia
    dados["Dist√¢ncia (km)"] = dados.apply(
        lambda row: calcular_distancia_osrm(coordenadas_usuario, (row["Latitude"], row["Longitude"])),
        axis=1
    )

    # Valores padr√£o para os filtros
    valor_range = (int(dados["Valor"].min()), int(dados["Valor"].max()))

    dist_range = (
        float(dados["Dist√¢ncia (km)"].min()),
        float(dados["Dist√¢ncia (km)"].max()),
    )
    avaliacao_minima = float(dados["Avalia√ß√£o"].min())

    todas_comodidades = pd.Series(
        ", ".join(dados["Comodidades"]).split(", ")
    ).unique()

    # Fun√ß√£o para resetar filtros
    if st.sidebar.button("üîÑ Limpar filtros"):
        st.session_state["valor"] = valor_range
        st.session_state["distancia"] = dist_range
        st.session_state["avaliacao"] = avaliacao_minima
        st.session_state["comodidade"] = []

    # Filtros na sidebar
    st.sidebar.header("Filtros adicionais")

    valor_min, valor_max = st.sidebar.slider(
        "Faixa de valor (R$)",
        min_value=valor_range[0],
        max_value=valor_range[1],
        value=st.session_state.get("valor", valor_range),
        step=100,
        key="valor",
    )

    dist_min, dist_max = st.sidebar.slider(
        "Faixa de dist√¢ncia (km)",
        min_value=dist_range[0],
        max_value=dist_range[1],
        value=st.session_state.get("distancia", dist_range),
        step=0.1,
        key="distancia",
    )

    avaliacao_min = st.sidebar.slider(
        "Avalia√ß√£o m√≠nima (estrelas)",
        min_value=float(dados["Avalia√ß√£o"].min()),
        max_value=float(dados["Avalia√ß√£o"].max()),
        value=st.session_state.get("avaliacao", avaliacao_minima),
        step=0.1,
        key="avaliacao",
    )

    comodidade = st.sidebar.multiselect(
        "Filtrar por comodidades:",
        options=todas_comodidades,
        default=st.session_state.get("comodidade", []),
        key="comodidade",
    )

    # Aplicar filtros
    dados_filtrados = dados[
        (dados["Valor"] >= valor_min)
        & (dados["Valor"] <= valor_max)
        & (dados["Dist√¢ncia (km)"] >= dist_min)
        & (dados["Dist√¢ncia (km)"] <= dist_max)
        & (dados["Avalia√ß√£o"] >= avaliacao_min)
    ]

    if comodidade:
        dados_filtrados = dados_filtrados[
            dados_filtrados["Comodidades"].apply(
                lambda x: all(c in x for c in comodidade)
            )
        ]

    # Calcular o custo-benef√≠cio (menor √© melhor)
    dados_filtrados["Custo-benef√≠cio"] = dados_filtrados["Valor"] / (dados_filtrados["Avalia√ß√£o"] * (dados_filtrados["Dist√¢ncia (km)"] + 1))

    # Melhor custo-benef√≠cio (menor valor de custo-benef√≠cio)
    melhor_custo_beneficio = dados_filtrados.loc[dados_filtrados["Custo-benef√≠cio"].idxmin()]

    # Mais perto (menor dist√¢ncia)
    mais_perto = dados_filtrados.loc[dados_filtrados["Dist√¢ncia (km)"].idxmin()]

    # Melhor avaliada (maior avalia√ß√£o)
    melhor_avaliada = dados_filtrados.loc[dados_filtrados["Avalia√ß√£o"].idxmax()]

    st.markdown("### Ch√°caras Filtradas")
    cor_fundo = "#1E1E1E"  # tom escuro para combinar com o tema dark
    cor_caixa = "#2C2C2C"  # um pouco mais clara pra destacar
    cor_texto = "#F0F0F0"

    col1, col2, col3 = st.columns(3)

    for i, (index, row) in enumerate(dados_filtrados.iterrows()):
        col = [col1, col2, col3][i % 3]
        with col:
            st.markdown(
                f"""
                <div style="
                    background-color: {cor_caixa}; 
                    border-radius: 12px; 
                    padding: 16px; 
                    margin-bottom: 20px; 
                    box-shadow: 0 2px 5px rgba(0,0,0,0.2);
                    color: {cor_texto};
                ">
                    <h4 style="margin-top: 0; color: {cor_texto};">{row['Nome']}</h4>
                    <img src="https://picsum.photos/300/180?random={i}" 
                        style="width: 100%; height: auto; border-radius: 8px; margin-bottom: 10px;">
                    <p><strong>Valor:</strong> R$ {row['Valor']}</p>
                    <p><strong>Avalia√ß√£o:</strong> {row['Avalia√ß√£o']} ‚≠ê</p>
                    <p><strong>Dist√¢ncia:</strong> {row['Dist√¢ncia (km)']} km</p>
                    <p><strong>Comodidades:</strong> {', '.join(row['Comodidades'].split(', ')[:4])}...</p>
                    <a href="#" style="text-decoration: none; color: #4EA8DE;">Ver mais</a>
                </div>
                """,
                unsafe_allow_html=True
            )

    # Exibindo os destaques
    st.markdown("### Destaques Autom√°ticos")
    st.write(f"**Melhor Custo-Benef√≠cio:** {melhor_custo_beneficio['Nome']} - R${melhor_custo_beneficio['Valor']}")
    st.write(f"**Mais Perto:** {mais_perto['Nome']} - Dist√¢ncia: {mais_perto['Dist√¢ncia (km)']} km")
    st.write(f"**Melhor Avaliada:** {melhor_avaliada['Nome']} - Avalia√ß√£o: {melhor_avaliada['Avalia√ß√£o']} estrelas")

    # Fun√ß√£o para calcular a rota entre dois pontos usando a API OSRM
    def get_route(start_coords, end_coords):
        # Formatar a URL para a API OSRM
        url = f"http://router.project-osrm.org/route/v1/driving/{start_coords[1]},{start_coords[0]};{end_coords[1]},{end_coords[0]}?overview=full&geometries=geojson"
        
        # Fazer a requisi√ß√£o √† API
        response = requests.get(url)
        data = response.json()
        
        # Extrair a geometria da rota
        route_geometry = data['routes'][0]['geometry']
        
        # Extrair dist√¢ncia e tempo estimado da rota
        distance = data['routes'][0]['legs'][0]['distance'] / 1000  # em km
        duration = data['routes'][0]['legs'][0]['duration'] / 60  # em minutos
        
        return route_geometry, distance, duration

    # Criando o mapa
    m = folium.Map(
        location=[dados["Latitude"].mean(), dados["Longitude"].mean()],
        zoom_start=13,
        control_scale=True,
        tiles="CartoDB positron"
    )

    # Adicionando o marcador personalizado para sua casa
    folium.Marker(
        location=coordenadas_usuario,
        popup="Minha Casa",
        icon=folium.Icon(color="green", icon="home", prefix="fa")
    ).add_to(m)

    # Adicionando MarkerCluster para as ch√°caras
    marker_cluster = MarkerCluster().add_to(m)

    # Adicionando marcadores de localiza√ß√£o das ch√°caras
    for i, row in dados.iterrows():
        folium.Marker(
            location=[row["Latitude"], row["Longitude"]],
            popup=row["Nome"],
            icon=folium.Icon(color="blue", icon="info-sign", prefix="fa"),
        ).add_to(marker_cluster)

    # Adicionando um filtro para selecionar rotas na sidebar
    rotas_selecionadas = []
    st.sidebar.markdown("### Selecione as rotas para visualizar")

    for i, row in dados.iterrows():
        selected = st.sidebar.checkbox(f"Mostrar rota para {row['Nome']}", key=f"rota_{i}")
        if selected:
            rotas_selecionadas.append(i)

    # Exibindo as rotas selecionadas
    for i in rotas_selecionadas:
        end_coords = [dados.iloc[i]["Latitude"], dados.iloc[i]["Longitude"]]  
        route_geometry, distance, duration = get_route(coordenadas_usuario, end_coords)  

        # Adicionando a rota ao mapa
        folium.GeoJson(route_geometry, name=f"Rota para {dados.iloc[i]['Nome']}").add_to(m)
        
        # Exibindo a dist√¢ncia e o tempo estimado na interface do Streamlit
        st.sidebar.markdown(f"**Rota para {dados.iloc[i]['Nome']}**")
        st.sidebar.markdown(f"**Dist√¢ncia**: {distance:.2f} km")
        st.sidebar.markdown(f"**Tempo estimado**: {duration:.2f} minutos")

    # **Calculadora de Gasolina**
    st.sidebar.markdown("### Calculadora de Gasolina")

    # Input de pre√ßo da gasolina (em R$)
    preco_gasolina = st.sidebar.number_input("Pre√ßo da gasolina (R$/litro)", min_value=0.0, value=5.5, step=0.1)

    # Input de dist√¢ncia (em km)
    distancia = st.sidebar.number_input("Dist√¢ncia a ser percorrida (km)", min_value=0.0, value=50.0, step=1.0)

    # Input de efici√™ncia do carro (km/litro)
    eficiencia = st.sidebar.number_input("Efici√™ncia do carro (km/litro)", min_value=0.0, value=10.0, step=0.1)

    # C√°lculo de litros necess√°rios e valor gasto com gasolina
    if eficiencia > 0:
        # Calcular quantos litros de gasolina ser√£o necess√°rios
        litros_necessarios = distancia / eficiencia  # em litros
        valor_gasto = litros_necessarios * preco_gasolina  # em R$

        # Exibindo os resultados na sidebar
        st.sidebar.markdown(f"**Litros de gasolina necess√°rios**: {litros_necessarios:.2f} L")
        st.sidebar.markdown(f"**Valor estimado de gasolina**: R${valor_gasto:.2f}")
    else:
        st.sidebar.markdown("**Por favor, insira um valor v√°lido para a efici√™ncia do carro.**")

    # Exibindo o mapa
    map_html = m._repr_html_()
    st.markdown("### Localiza√ß√£o das Ch√°caras com Rotas")
    st.components.v1.html(map_html, height=500)

    st.markdown("## üìç Detalhes da Ch√°cara Selecionada")

    # Filtra somente as rotas selecionadas no checkbox (baseado na sidebar)
    chacaras_visiveis = dados_filtrados.loc[rotas_selecionadas]

    # Dicion√°rio com as informa√ß√µes por ch√°cara
    info_chacaras = {
        "Rancho": {
            "descricao": """Seja bem-vindo ao nosso s√≠tio em Indaiatuba, o destino perfeito para quem busca descanso, lazer e contato com a natureza.

    Nossa propriedade oferece:

    ‚úîÔ∏è Piscina para se refrescar nos dias quentes  
    ‚úîÔ∏è Lago para pesca para quem gosta de tranquilidade  
    ‚úîÔ∏è √Årea de churrasqueira  
    ‚úîÔ∏è 3 su√≠tes aconchegantes, equipadas para proporcionar conforto e uma √≥tima noite de sono

    Localizado em um ambiente cercado por muito verde, nosso s√≠tio proporciona a combina√ß√£o perfeita entre lazer e descanso.""",
            "imagens": [
                "imagens/rancho1.png"
            ]
        },
        "Ch√°cara charmosa": {
            "descricao": """O espa√ßo est√° localizado em uma regi√£o central pr√≥ximo a supermercados, bancos, bares e avenidas movimentadas, por√©m com toda a tranquilidade de um bairro seguro e calmo.

    ATEN√á√ÉO:

    a propriedade conta com 3 quartos sendo:

    01 Su√≠te
    01 quarto com cama de casal
    01 quarto com 2 camas de solteiro;
    01 colch√£o infl√°vel.
    02 banheiros externos anexos aos dois quartos al√©m do banheiro su√≠te.

    01 sal√£o com meda e cadeiras anexo √† √°rea gourmet.
    O espa√ßo
    A propriedade possui c√¢meras na √°rea externa.
    Outras observa√ß√µes
    Para uso da Jacuzzi interna, consultar previamente pois implica em taxas adicionais conforme quantidade de dias e n√∫mero de h√≥spedes.

    Streaming de filme dispon√≠vel: Watch Paramount +

    Maquina de Cafe: Tr√™s Cora√ß√µes (reposi√ß√£o de c√°psula solicitada com anteced√™ncia e faturada extraordinariamente conforme pedido)

    Sofa: Tecido Suede, caso constatado pelo animal, manchas, derramamento de l√≠quidos, ser√° solicitado valor correspondente a higienizacao.

    aquecedor: Alimenta√ß√£o 220v

    Roupas de cama e Toalhas: ser√° fornecido apenas forra√ß√£o como len√ßol e capas para travesseiro.

    Toalha apenas de rosto.

    PROIBIDO ANIMAIS / PETS NA PISCINA, INDEPENDENTE DA RA√áA/ ESP√âCIE.

    PROIBIDO VIDROS E ALIMENTOS NA PISCINA;

    PROIBIDO SOM ALTO A QUALQUER HORA DO DIA.

    EM CASO DE CHUVA E VENTO: RECOLHA OS TOLDO E GUARDA SOL.""",
            "imagens": [
                "imagens/chacara2_1.jpg",
                "imagens/chacara2_2.jpg"
            ]
        },
        "Ch√°cara agrad√°vel": {
            "descricao": """Relaxe com toda a fam√≠lia nesta acomoda√ß√£o tranquila.
    Chacara com conforto e mercado na esquina.
    Aproveite a tranquilidade e a natureza a 15 km da cidade, num bairro de chacaras.
    Wi Fi TV Piscina Churrasqueira
    O espa√ßo
    sala cozinha varanda 3 quartos
    2 camas de casal
    1 cama box de solteiro
    1 cama de solteiro com cama auxiliar
    1 sof√° cama de casal
    1 colch√£o infl√°vel de casal ( pode ser usado na piscina)
    2 redes
    sanduicheira
    cafeteira el√©trica
    churrasqueiras
    micro-ondas
    espremedor de laranja
    fogao 4 bocas e forno
    geladeira""",
            "imagens": [
                "imagens/chacara3_1.jpg",
                "imagens/chacara3_2.jpg"
            ]
        },
        "Casa inteira": {
            "descricao": """A casa fica dentro do condom√≠nio Marambaia, em Vinhedo. √â toda plana, com exce√ß√£o do espa√ßo da churrasqueira/forno √† lenha, que √© acessado por escada. Cont√©m 2 quartos de casal, 1 quarto de solteiro com duas camas box e 2 colch√µes extra novos (de solteiro), totalizando 8 pessoas acomodadas. Tamb√©m conta com 2 salas, ambiente externo com churrasqueira e forno √† lenha (pizza \o/), piscina exclusiva e garagem para 3 carros.
    O espa√ßo
    A casa tem uma vista incr√≠vel, ideal para encontros familiares, j√° que √© um ambiente muito aconchegante.

    Na casa voc√™ encontra:
    -Roupas de Cama e Banho, Cobertores e Travesseiros
    -Itens b√°sicos de higiene e limpeza
    -Camas de casal de molas
    -SmartTV, Netflix com home theater
    -Ar condicionado
    -Wi-fi
    -Utens√≠lios para fazer pizza no forno √† lenha e para churrasco
    -Cafeteira Nespresso
    -Lava-lou√ßas
    -M√°quina de lavar roupa

    Observa√ß√µes muito importantes:

    - N√£o √© permitido festas e som alto. O condom√≠nio e a vizinhan√ßa s√£o totalmente familiares e, portanto, n√£o √© o ambiente adequado para isso.
    Acesso do h√≥spede
    Acesso total e particular a todas as √°reas do terreno, incluindo piscina, churrasqueira e forno √† lenha.
    Outras observa√ß√µes
    Todas as tomadas 220V.""",
            "imagens": [
                "imagens/chacara4_1.jpg",
                "imagens/chacara4_2.jpg"
            ]
        }
    }

    # Lista de nomes das ch√°caras vis√≠veis que tamb√©m existem no dicion√°rio
    nomes_visiveis = [nome for nome in chacaras_visiveis["Nome"] if nome in info_chacaras]

    # Se houver ch√°cara vis√≠vel, mostra os detalhes
    if nomes_visiveis:
        chacara_selecionada = st.selectbox("Selecione uma ch√°cara para ver detalhes", nomes_visiveis)

        st.markdown(f"### {chacara_selecionada}")
        st.markdown(info_chacaras[chacara_selecionada]["descricao"])
        
        # Pega os dados da ch√°cara original (linha do dataframe)
        dados_chacara = chacaras_visiveis[chacaras_visiveis["Nome"] == chacara_selecionada].iloc[0]

        st.markdown(f"**üí∞ Valor:** R${dados_chacara['Valor']}")
        st.markdown(f"**üìè Dist√¢ncia:** {dados_chacara['Dist√¢ncia (km)']} km")
        st.markdown(f"**‚≠ê Avalia√ß√£o:** {dados_chacara['Avalia√ß√£o']} ({dados_chacara['N√∫mero de Avalia√ß√µes']} avalia√ß√µes)")

        # Mostra imagens
        #st.image(info_chacaras[chacara_selecionada]["imagens"], use_column_width=True)
    else:
        st.info("Selecione pelo menos uma ch√°cara na barra lateral para visualizar os detalhes.")
else:
    st.warning("Por favor, insira suas coordenadas para visualizar o dashboard.")
